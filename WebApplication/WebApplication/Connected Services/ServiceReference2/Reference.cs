//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/createUser", ReplyAction="http://tempuri.org/IService1/createUserResponse")]
        bool createUser(string userName, string userPassword, string userType, string userLoggedIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/createUser", ReplyAction="http://tempuri.org/IService1/createUserResponse")]
        System.Threading.Tasks.Task<bool> createUserAsync(string userName, string userPassword, string userType, string userLoggedIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/userNameExists", ReplyAction="http://tempuri.org/IService1/userNameExistsResponse")]
        bool userNameExists(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/userNameExists", ReplyAction="http://tempuri.org/IService1/userNameExistsResponse")]
        System.Threading.Tasks.Task<bool> userNameExistsAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/userLogin", ReplyAction="http://tempuri.org/IService1/userLoginResponse")]
        bool userLogin(string userName, string encryptedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/userLogin", ReplyAction="http://tempuri.org/IService1/userLoginResponse")]
        System.Threading.Tasks.Task<bool> userLoginAsync(string userName, string encryptedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/debugFunct", ReplyAction="http://tempuri.org/IService1/debugFunctResponse")]
        string debugFunct();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/debugFunct", ReplyAction="http://tempuri.org/IService1/debugFunctResponse")]
        System.Threading.Tasks.Task<string> debugFunctAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WebApplication.ServiceReference2.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WebApplication.ServiceReference2.IService1>, WebApplication.ServiceReference2.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool createUser(string userName, string userPassword, string userType, string userLoggedIn) {
            return base.Channel.createUser(userName, userPassword, userType, userLoggedIn);
        }
        
        public System.Threading.Tasks.Task<bool> createUserAsync(string userName, string userPassword, string userType, string userLoggedIn) {
            return base.Channel.createUserAsync(userName, userPassword, userType, userLoggedIn);
        }
        
        public bool userNameExists(string userName) {
            return base.Channel.userNameExists(userName);
        }
        
        public System.Threading.Tasks.Task<bool> userNameExistsAsync(string userName) {
            return base.Channel.userNameExistsAsync(userName);
        }
        
        public bool userLogin(string userName, string encryptedPassword) {
            return base.Channel.userLogin(userName, encryptedPassword);
        }
        
        public System.Threading.Tasks.Task<bool> userLoginAsync(string userName, string encryptedPassword) {
            return base.Channel.userLoginAsync(userName, encryptedPassword);
        }
        
        public string debugFunct() {
            return base.Channel.debugFunct();
        }
        
        public System.Threading.Tasks.Task<string> debugFunctAsync() {
            return base.Channel.debugFunctAsync();
        }
    }
}
